#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.4.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_dummy_impl(port_: MessagePort, a: impl Wire2Api<LogEntry> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "dummy",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_a = a.wire2api();
            move |task_callback| Result::<_, ()>::Ok(dummy(api_a))
        },
    )
}
fn wire_rust_set_up_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        WrapInfo {
            debug_name: "rust_set_up",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(rust_set_up()),
    )
}
fn wire_create_log_stream_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "create_log_stream",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || move |task_callback| create_log_stream(task_callback.stream_sink::<_, LogEntry>()),
    )
}
fn wire_publish_message_impl(port_: MessagePort, message: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "publish_message",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_message = message.wire2api();
            move |task_callback| Result::<_, ()>::Ok(publish_message(api_message))
        },
    )
}
fn wire_print_hello_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        WrapInfo {
            debug_name: "print_hello",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(print_hello()),
    )
}
fn wire_add_impl(
    port_: MessagePort,
    a: impl Wire2Api<i32> + UnwindSafe,
    b: impl Wire2Api<i32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i32, _>(
        WrapInfo {
            debug_name: "add",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            move |task_callback| Result::<_, ()>::Ok(add(api_a, api_b))
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}
impl Wire2Api<i64> for i64 {
    fn wire2api(self) -> i64 {
        self
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for LogEntry {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.time_millis.into_into_dart().into_dart(),
            self.level.into_into_dart().into_dart(),
            self.tag.into_into_dart().into_dart(),
            self.user_id.into_into_dart().into_dart(),
            self.user.into_into_dart().into_dart(),
            self.msg.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for LogEntry {}
impl rust2dart::IntoIntoDart<LogEntry> for LogEntry {
    fn into_into_dart(self) -> Self {
        self
    }
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    use super::*;
    // Section: wire functions

    #[wasm_bindgen]
    pub fn wire_dummy(port_: MessagePort, a: JsValue) {
        wire_dummy_impl(port_, a)
    }

    #[wasm_bindgen]
    pub fn wire_rust_set_up(port_: MessagePort) {
        wire_rust_set_up_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_create_log_stream(port_: MessagePort) {
        wire_create_log_stream_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_publish_message(port_: MessagePort, message: String) {
        wire_publish_message_impl(port_, message)
    }

    #[wasm_bindgen]
    pub fn wire_print_hello(port_: MessagePort) {
        wire_print_hello_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_add(port_: MessagePort, a: i32, b: i32) {
        wire_add_impl(port_, a, b)
    }

    // Section: allocate functions

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for String {
        fn wire2api(self) -> String {
            self
        }
    }

    impl Wire2Api<LogEntry> for JsValue {
        fn wire2api(self) -> LogEntry {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                6,
                "Expected 6 elements, got {}",
                self_.length()
            );
            LogEntry {
                time_millis: self_.get(0).wire2api(),
                level: self_.get(1).wire2api(),
                tag: self_.get(2).wire2api(),
                user_id: self_.get(3).wire2api(),
                user: self_.get(4).wire2api(),
                msg: self_.get(5).wire2api(),
            }
        }
    }

    impl Wire2Api<Vec<u8>> for Box<[u8]> {
        fn wire2api(self) -> Vec<u8> {
            self.into_vec()
        }
    }
    // Section: impl Wire2Api for JsValue

    impl<T> Wire2Api<Option<T>> for JsValue
    where
        JsValue: Wire2Api<T>,
    {
        fn wire2api(self) -> Option<T> {
            (!self.is_null() && !self.is_undefined()).then(|| self.wire2api())
        }
    }
    impl Wire2Api<String> for JsValue {
        fn wire2api(self) -> String {
            self.as_string().expect("non-UTF-8 string, or not a string")
        }
    }
    impl Wire2Api<i32> for JsValue {
        fn wire2api(self) -> i32 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<i64> for JsValue {
        fn wire2api(self) -> i64 {
            ::std::convert::TryInto::try_into(self.dyn_into::<js_sys::BigInt>().unwrap()).unwrap()
        }
    }
    impl Wire2Api<u8> for JsValue {
        fn wire2api(self) -> u8 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<Vec<u8>> for JsValue {
        fn wire2api(self) -> Vec<u8> {
            self.unchecked_into::<js_sys::Uint8Array>().to_vec().into()
        }
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;

#[cfg(not(target_family = "wasm"))]
mod io {
    use super::*;
    // Section: wire functions

    #[no_mangle]
    pub extern "C" fn wire_dummy(port_: i64, a: *mut wire_LogEntry) {
        wire_dummy_impl(port_, a)
    }

    #[no_mangle]
    pub extern "C" fn wire_rust_set_up(port_: i64) {
        wire_rust_set_up_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_create_log_stream(port_: i64) {
        wire_create_log_stream_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_publish_message(port_: i64, message: *mut wire_uint_8_list) {
        wire_publish_message_impl(port_, message)
    }

    #[no_mangle]
    pub extern "C" fn wire_print_hello(port_: i64) {
        wire_print_hello_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_add(port_: i64, a: i32, b: i32) {
        wire_add_impl(port_, a, b)
    }

    // Section: allocate functions

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_log_entry_0() -> *mut wire_LogEntry {
        support::new_leak_box_ptr(wire_LogEntry::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_uint_8_list_0(len: i32) -> *mut wire_uint_8_list {
        let ans = wire_uint_8_list {
            ptr: support::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        support::new_leak_box_ptr(ans)
    }

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for *mut wire_uint_8_list {
        fn wire2api(self) -> String {
            let vec: Vec<u8> = self.wire2api();
            String::from_utf8_lossy(&vec).into_owned()
        }
    }
    impl Wire2Api<LogEntry> for *mut wire_LogEntry {
        fn wire2api(self) -> LogEntry {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<LogEntry>::wire2api(*wrap).into()
        }
    }

    impl Wire2Api<LogEntry> for wire_LogEntry {
        fn wire2api(self) -> LogEntry {
            LogEntry {
                time_millis: self.time_millis.wire2api(),
                level: self.level.wire2api(),
                tag: self.tag.wire2api(),
                user_id: self.user_id.wire2api(),
                user: self.user.wire2api(),
                msg: self.msg.wire2api(),
            }
        }
    }

    impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
        fn wire2api(self) -> Vec<u8> {
            unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    // Section: wire structs

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_LogEntry {
        time_millis: i64,
        level: i32,
        tag: *mut wire_uint_8_list,
        user_id: *mut wire_uint_8_list,
        user: *mut wire_uint_8_list,
        msg: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_uint_8_list {
        ptr: *mut u8,
        len: i32,
    }

    // Section: impl NewWithNullPtr

    pub trait NewWithNullPtr {
        fn new_with_null_ptr() -> Self;
    }

    impl<T> NewWithNullPtr for *mut T {
        fn new_with_null_ptr() -> Self {
            std::ptr::null_mut()
        }
    }

    impl NewWithNullPtr for wire_LogEntry {
        fn new_with_null_ptr() -> Self {
            Self {
                time_millis: Default::default(),
                level: Default::default(),
                tag: core::ptr::null_mut(),
                user_id: core::ptr::null_mut(),
                user: core::ptr::null_mut(),
                msg: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_LogEntry {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    // Section: sync execution mode utility

    #[no_mangle]
    pub extern "C" fn free_WireSyncReturn(ptr: support::WireSyncReturn) {
        unsafe {
            let _ = support::box_from_leak_ptr(ptr);
        };
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
